import{_ as o,c as i,b as a,o as s}from"./app-DUNtouPH.js";const n={};function t(l,e){return s(),i("div",null,e[0]||(e[0]=[a('<h2 id="项目配置优先级" tabindex="-1"><a class="header-anchor" href="#项目配置优先级"><span>项目配置优先级</span></a></h2><ol><li><strong>file:config/application.yml</strong></li><li><strong>file:application.yml</strong></li><li><strong>classpath:config/application.yml</strong></li><li><strong>classpath:application.yml</strong></li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>从上到下优先级依次变低</p></div><h2 id="默认静态资源优先级" tabindex="-1"><a class="header-anchor" href="#默认静态资源优先级"><span>默认静态资源优先级</span></a></h2><ol><li><strong>resources/META-INF/resources</strong></li><li><strong>resources/resources</strong></li><li><strong>resources/static</strong></li><li><strong>resources/public</strong></li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>从上到下优先级依次变低 实际上是代码中资源路径数组的生命顺序</p></div><h2 id="spring中的路径匹配规则" tabindex="-1"><a class="header-anchor" href="#spring中的路径匹配规则"><span>Spring中的路径匹配规则</span></a></h2><ol><li><code>?</code> 匹配一个字符</li><li><code>*</code> 匹配零个或者多个字符</li><li><code>**</code> 匹配零个或者多个路径中的目录</li><li><code>{spring:[a-z]+}</code> 匹配一个正则 <code>[a-z]+</code> 作为一个路径变量 <code>&quot;spring&quot;</code> 的值</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>例子</strong></p><ul><li><p><code>com/t?st.jsp</code> — 匹配 <code>com/test.jsp</code> 也匹配 <code>com/tast.jsp</code> 或者 <code>com/txst.jsp</code></p></li><li><p><code>com/*.jsp</code> — 匹配所有 <code>com</code> 目录下的 <code>.jsp</code> 文件</p></li><li><p><code>com/**/test.jsp</code> — 匹配所有 <code>com</code> 目录下的 test.jsp 文件</p></li><li><p><code>org/springframework/**/*.jsp</code> — 匹配所有 <code>org/springframework</code> 目录下的所有 <code>.jsp</code> 文件</p></li><li><p><code>org/**/servlet/bla.jsp</code> — 匹配 <code>org/springframework/servlet/bla.jsp</code> 也匹配 <code>org/springframework/testing/servlet/bla.jsp</code> 和 <code>org/servlet/bla.jsp</code></p></li><li><p><code>com/{filename:\\\\w+}.jsp</code> 将匹配 <code>com/test.jsp</code> 并将 <code>&quot;test&quot;</code> 赋值给 <code>&quot;filename&quot;</code> 变量</p></li></ul></div><h2 id="bean的生命周期" tabindex="-1"><a class="header-anchor" href="#bean的生命周期"><span>Bean的生命周期</span></a></h2><h3 id="bean的作用域" tabindex="-1"><a class="header-anchor" href="#bean的作用域"><span>Bean的作用域</span></a></h3><ul><li><code>singleton</code> 单例作用域</li></ul><p>Bean 在 IOC 容器中仅存在一个实例</p><ul><li><code>prototype</code> 原型作用域</li></ul><p>每次从容器中调用Bean(getBean())时, 都返回一个新的实例</p><ul><li><code>request</code> HTTP 请求作用域(WEB)</li></ul><p>每次HTTP请求都会创建一个 Bean</p><ul><li><code>session</code> HTTP Session 作用域(WEB)</li></ul><p>同一个 HTTP Session 共享一个 Bean, 不同的 Session 使用不同的 Bean</p><ul><li><code>global-session</code> 全局 session 作用域(WEB)</li></ul><p>用于 Portlet 应用, Spring 5 已经没有了</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Portlet 是能够生成语义代码（例如：HTML）片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</p></div><h3 id="生命周期阶段" tabindex="-1"><a class="header-anchor" href="#生命周期阶段"><span>生命周期阶段</span></a></h3><ol><li>实例化阶段</li><li>属性赋值阶段</li><li>初始化阶段</li><li>销毁阶段</li></ol><h3 id="生命周期接口" tabindex="-1"><a class="header-anchor" href="#生命周期接口"><span>生命周期接口</span></a></h3><h4 id="容器级接口方法" tabindex="-1"><a class="header-anchor" href="#容器级接口方法"><span>容器级接口方法</span></a></h4><ul><li><p>InstantiationAwareBeanPostProcessor 实例化感知后处理器</p><ul><li>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</li></ul><p>Bean 实例化之前调用, 如果返回值不为 null, 后续的 Bean 创建流程(实例化、初始化)都不会执行, 返回值会替换原有的 bean 作为代理, 是实现 AOP 的关键</p><ul><li>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation</li></ul><p>Bean 实例化之后属性填充之前调用, 如果返回 false 后续的属性填充和属性依赖注入都不会执行</p><ul><li>InstantiationAwareBeanPostProcessor#postProcessPropertyValues</li></ul><p>在 applyPropertyValues 属性填充方法之前 如果返回 null 将不会进行后续的属性填充</p></li><li><p>BeanPostProcessor Bean 后处理方法</p><ul><li>postProcessBeforeInitialization 在属性赋值之后, 在各种 Bean级别的 Aware 之后</li><li>postProcessAfterInitialization 在任何 bean 初始化回调(InitializingBean、afterPropertiesSet、自定义初始化方法) 执行之后</li></ul></li><li><p>BeanFactoryPostProcessor 工厂后处理方法</p><p>BeanDefinitionRegistryPostProcessor 实现 BeanFactoryPostProcessor 接口的接口</p><ul><li><p>BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry(registry) 优先调用传入 beanFactoryPostProcessors 的 postProcessBeanDefinitionRegistry, 之后获取容器中注册的 BeanDefinitionRegistryPostProcessor, 会根据是否实现排序接口分别进行处理</p></li><li><p>BeanFactoryPostProcessor#postProcessBeanFactory(beanFactory) 先处理属于 BeanDefinitionRegistryPostProcessor 接口的实例, 会根据是否实现排序接口分别进行处理</p></li></ul></li></ul><h4 id="bean级接口方法" tabindex="-1"><a class="header-anchor" href="#bean级接口方法"><span>Bean级接口方法</span></a></h4><p>Bean 类直接实现接口的方法，比如 <code>BeanNameAware</code>、<code>BeanFactoryAware</code>、<code>ApplicationContextAware</code>、<code>InitializingBean``、DisposableBean</code> 等方法，这些方法只对当前 Bean 生效。</p><ol><li><p><strong>Aware 类型接口</strong></p><p>可以帮我们拿到 Spring 容器中的一些资源, 所有的 Aware 都是在初始化之前调用的</p></li></ol><ul><li><p>Beanxxx 直接调用组(先执行)</p><ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul></li><li><p>环境资源注入组(后执行)</p><ul><li><p>EnvironmentAware</p></li><li><p>EmbeddedValueResolverAware</p><p>实现该接口能够获取 Spring EL 解析器，用户的自定义注解需要支持 SPEL 表达式的时候可以使用。</p></li><li><p>ApplicationContextAware(ResourceLoaderAware/ApplicationEventPublisherAware/MessageSourceAware)</p><p>这几个接口的返回值实质上都是当前的 ApplicationContext 对象，因为 ApplicationContext 是一个复合接口。与此相关的 Aware 都是通过BeanPostProcessor#postProcessBeforeInitialization()， 通过 ApplicationContextAwareProcessor#invokeAwareInterfaces 可以得知。</p></li></ul></li></ul><ol start="2"><li><strong>生命周期接口</strong></li></ol><ul><li>InitializingBean 初始化阶段</li><li>DisposableBean 销毁阶段</li></ul><h3 id="生命周期流程图" tabindex="-1"><a class="header-anchor" href="#生命周期流程图"><span>生命周期流程图</span></a></h3><p><img src="https://ling-root-bucket.oss-cn-hangzhou.aliyuncs.com/picgo/3470413121-2abed99e085c254a.webp" alt="生命周期流程图"></p>',35)]))}const c=o(n,[["render",t]]),p=JSON.parse('{"path":"/java/spring.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754642790000,"contributors":[{"name":"lsj","username":"lsj","email":"lishaojie@aithu.com","commits":1,"url":"https://github.com/lsj"}],"changelog":[{"hash":"68c8fe668940c6c2d5e4fcf94e88aebaeecb290d","time":1754642790000,"email":"lishaojie@aithu.com","author":"lsj","message":"updte"}]},"filePathRelative":"java/spring.md"}');export{c as comp,p as data};

import{_ as e,c as a,b as n,o as l}from"./app-DUNtouPH.js";const i={};function c(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h3 id="wsl-常见问题汇总" tabindex="-1"><a class="header-anchor" href="#wsl-常见问题汇总"><span>WSL 常见问题汇总</span></a></h3><ul><li><p>docker 启动 es 出现 <code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></p><p>通常的做法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">vim</span> /etc/sysctl.conf</span>
<span class="line">增加 <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span></span>
<span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-p</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上方法在 WSL 中如果重启就会失效，在 WSL 请使用以下方法</p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf"><pre><code class="language-conf"><span class="line"># 修改或添加 %userprofile%/.wslconfig</span>
<span class="line">[wsl2]</span>
<span class="line">kernelCommandLine = &quot;sysctl.vm.max_map_count=262144&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>WSL2 Docker释放磁盘空间</p><blockquote><p>参考 https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168</p></blockquote><ol><li>删除Docker中的无用镜像</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> system prune</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>退出 Docker Desktop, 并关停 WSL2 实例</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">## 关停 WSL2</span></span>
<span class="line">wsl <span class="token parameter variable">--shutdown</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>命令行输入 diskpart, 进入 diskpart 工具</li></ol><div class="language-cmd line-numbers-mode" data-highlighter="prismjs" data-ext="cmd"><pre><code class="language-cmd"><span class="line">select vdisk file=&quot;C:\\Users\\&lt;你的用户名&gt;\\AppData\\Local\\Docker\\wsl\\data\\ext4.vhdx&quot;</span>
<span class="line">attach vdisk readonly</span>
<span class="line">compact vdisk</span>
<span class="line">detach vdisk</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://ling-root-bucket.oss-cn-hangzhou.aliyuncs.com/picgo/20230519124624.png" alt=""></p></li><li><p>WSL2 2.0.x 下内存回收和硬盘空闲空间回收</p></li></ul><p>先前的 WSL 有着的内存泄露问题，目前在 <code>~/.wslconfig</code>内设置 \`autoMemoryReclaim=gradual\`\` 可以解决问题，不过需要注意的是，设置了该选项之后不推荐启用 systemd 相关功能。</p><p>同时，可以设置 <code>sparseVhd=true</code>，之后新安装的发行版均会自动回收其虚拟硬盘文件的空闲空间。对于已经安装的发行版，可以使用 <code>wsl --manage &lt;Distro&gt; --set-sparse &lt;true/false&gt;</code> 为发行版的虚拟硬盘文件启用该功能。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">[experimental]</span>
<span class="line">autoMemoryReclaim=gradual # gradual/dropcache/disabled</span>
<span class="line">sparseVhd=true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>WSL2.0 .wslconfig autoProxy 配置为 true 时会自动使用系统代理，导致的问题</li></ul><p>wsl 任意分发版直接使用系统代理时，如果系统代理配置的是 127.0.0.1 的IP，WSL是无法访问，如果配置的是公网或者内网IP则可以。</p><p>当结合v2ray等代理工具使用时，使用其提供的自动代理设置功能同样会导致WSL自动配置 127.0.0.1 的代理IP，同样的使用docker 时 docker-desktop 分发版也会出现相同的问题，导致docker pull/push 无法拉取出现 <code>proxyconnect tcp: dial tcp 127.0.0.1:xxxx: connect: connection refused</code> 的错误。</p><p>解决方案一: 参照<strong>WSL代理脚本</strong> 在docker 和 默认的分发版 <code>~/.bashrc</code> 中都添加 <code>. /mnt/d/Dev/wslproxy/proxy.sh set</code>, 利用改脚本重设一下代理，在默认WSL当前会话生效，但是在Docker 的WSL分发版中无效的，推送拉取可能不会触发 ~/.bashrc 的加载，此时通过手动重置 docker 分发版的代理可以临时解除一下代理; 同样的此方法还可以设置在 <code>/etc/profile</code> 里</p><p>解决方案二: .wslconfig autoProxy 配置为 false</p>`,10)]))}const d=e(i,[["render",c]]),o=JSON.parse('{"path":"/machine/windows/wsl.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754642790000,"contributors":[{"name":"lsj","username":"lsj","email":"lishaojie@aithu.com","commits":1,"url":"https://github.com/lsj"}],"changelog":[{"hash":"68c8fe668940c6c2d5e4fcf94e88aebaeecb290d","time":1754642790000,"email":"lishaojie@aithu.com","author":"lsj","message":"updte"}]},"filePathRelative":"machine/windows/wsl.md"}');export{d as comp,o as data};

import{_ as t,c as r,b as a,d as n,w as e,r as l,o as c,e as o}from"./app-DUNtouPH.js";const d={};function m(u,s){const i=l("font"),p=l("center");return c(),r("div",null,[s[1]||(s[1]=a(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><h3 id="homestead-搭建基本环境" tabindex="-1"><a class="header-anchor" href="#homestead-搭建基本环境"><span>Homestead 搭建基本环境</span></a></h3><ol><li><p>拉取项目，添加env文件,并将项目放入虚拟机的映射文件中</p></li><li><p>修改项目权限，简单起见chmod 777</p></li><li><p>配置Homestead.yml文件的项目访问域名映射</p></li><li><p>修改/etc/hosts 文件,添加域名和IP的映射解析 例如:192.168.10.10 homestead.linde</p></li><li><p>vagrant up --provision 启动虚拟机</p></li><li><p>vagrant ssh 连接虚拟机 进入映射项目目录执行composer install 安装项目依赖</p></li><li><p>sudo killall -HUP mDNSResponder 刷新hosts文件的修改</p></li><li><p>PHP远程调试携带参数:Cookie: XDEBUG_SESSION=PHPSTORM</p></li><li><p>homestead nginx 配置php版本修改重启失效,可以在Homestead.yaml文件中单独指定每个站点的php版本，此时虚拟机的nginx配置改变</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">map</span><span class="token punctuation">:</span> homestead.linde</span>
<span class="line">      <span class="token key atrule">to</span><span class="token punctuation">:</span> /home/vagrant/code/linde_web/public</span>
<span class="line">      <span class="token key atrule">php</span><span class="token punctuation">:</span> <span class="token string">&quot;7.1&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="docker-搭建基本环境" tabindex="-1"><a class="header-anchor" href="#docker-搭建基本环境"><span>Docker 搭建基本环境</span></a></h3><ol><li><p>Docker安装</p><ul><li>官网地址： https://www.docker.com/</li><li>下载地址： https://www.docker.com/get-started</li></ul><blockquote><p><strong>安装步骤不在赘述。</strong></p></blockquote></li><li><p>获取开发环境PHP docker镜像</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"># github项目地址： https://github.com/Laradock/laradock</span>
<span class="line"># 克隆代码 克隆的位置比较敏感，PHP Workspace会以克隆地址目录作为基础。</span>
<span class="line">git clone git@github.com:laradock/laradock.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>拉取部署镜像，首先要配置好docker的国内的源，用来加速镜像。配置位于： ~/.docker/daemon.json</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;https://dockerhub.azk8s.cn&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;https://reg-mirror.qiniu.com&quot;</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;debug&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;experimental&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>复制切换到源码目录，打开终端构建镜像。这要花费一定的时间。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">docker-compose build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>启动PHP工作容器。</p></li></ol><pre><code>&lt;p&gt;根据自己的需要启动组件。比如mysql，redis，mongo之类的。nginx应该是必须要的这样访问localhost可以看到自己的项目&lt;/p&gt;
&lt;p&gt;还有一些组件laradock_php-fpm，laradock_workspace是默认启动的，因为其他组件依赖这些组件。而且这些组件也算是基础必须的组件了。&lt;/p&gt;

  \`\`\`
  docker-compose up -d nginx mysql
  \`\`\`
</code></pre><ol start="6"><li><p>构建第一个项目 在这之前已经顺利启动了相关组件以及workspace。 通过“docker-compose ps”命令查看启用状况。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">        Name                          Command              State                    Ports</span>
<span class="line">--------------------------------------------------------------------------------------------------------------</span>
<span class="line">laradock_docker-in-docker_1   dockerd-entrypoint.sh           Up      2375/tcp</span>
<span class="line">laradock_mysql_1              docker-entrypoint.sh mysqld     Up      0.0.0.0:3306-&gt;3306/tcp, 33060/tcp</span>
<span class="line">laradock_nginx_1              /bin/bash /opt/startup.sh       Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span>
<span class="line">laradock_php-fpm_1            docker-php-entrypoint php-fpm   Up      9000/tcp</span>
<span class="line">laradock_workspace_1          /sbin/my_init                   Up      0.0.0.0:2222-&gt;22/tcp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在这里需要作出一些说明</p><ul><li>PHP所需要的SDK和Runtime已经安装在了docker容器中，并且容器正在运行。</li><li>想要创建新的项目，只能利用容器。因为主机只有docker，docker容器中才有SDK。</li><li>docker利用和主机共享目录的方式创建项目和开发项目。主机利用共享目录开发，容器利用共享目录支撑运行。</li></ul></li><li><p>进入workspace容器</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">docker-compose exec --user=laradock workspace bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><strong>必须使用laradock用户权限进入创建项目。如果用root权限创建是不行的，具体会有提示。</strong></p></div></li><li><p>脚手架安装和使用</p><ul><li><p>创建项目的命令包括:（没有配置国内源，先配置。见下）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">composer create-project laravel/laravel demo</span>
<span class="line"># or</span>
<span class="line">laravel new demo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其中laravel脚手架需要额外进行安装。安装完就可以用脚手架搭建项目了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">composer global require laravel/installer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>进入容器后，使用脚手架需要配置国内源，否则很难创建项目。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>运行之前，这里需要修改</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"># 修改.env文件，将基础目录直接映射至自己的项目。</span>
<span class="line"># Point to the path of your applications code on your host</span>
<span class="line">APP_CODE_PATH_HOST=../wwwroot/demo</span>
<span class="line"></span>
<span class="line"># 重启niginx</span>
<span class="line">docker-compose up -d nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行</p></li></ol><p>打开<a href="http://localhost" target="_blank" rel="noopener noreferrer">http://localhost</a>此时应该会显示Laravel的项目开始图片。 <img src="https://laravelacademy.org/wp-content/uploads/2017/09/15051482331119.jpg" alt="image"></p>`,8)),n(p,null,{default:e(()=>[n(i,{size:"32"},{default:e(()=>s[0]||(s[0]=[o("GOOD LUCK",-1)])),_:1,__:[0]})]),_:1}),s[2]||(s[2]=a(`<p>一些有用的网址以及教程参考：<br><a href="https://note.youdao.com/" target="_blank" rel="noopener noreferrer">https://laravel.com/</a></p><p><a href="https://note.youdao.com/" target="_blank" rel="noopener noreferrer">https://laravel.com/docs/5.7</a></p><p><a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener noreferrer">https://pkg.phpcomposer.com/</a></p><p><a href="https://laravelacademy.org/post/7691.html%5D" target="_blank" rel="noopener noreferrer">https://laravelacademy.org/post/7691.html</a></p><p><a href="https://laravelacademy.org/post/6569.html" target="_blank" rel="noopener noreferrer">https://laravelacademy.org/post/6569.html</a></p><p><a href="https://learnku.com/articles/14767/" target="_blank" rel="noopener noreferrer">https://learnku.com/articles/14767/</a></p><p><a href="https://note.youdao.com/" target="_blank" rel="noopener noreferrer">self-built-laravel-docker-development-environment</a></p><h3 id="amqp-扩展安装" tabindex="-1"><a class="header-anchor" href="#amqp-扩展安装"><span>AMQP 扩展安装</span></a></h3><ol><li><p>安装 rabbitmq-c</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> clone https://github.com/alanxz/rabbitmq-c.git</span>
<span class="line"><span class="token builtin class-name">cd</span> rabbitmq-c/</span>
<span class="line"><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build</span>
<span class="line"><span class="token comment"># 这一步是在rabbitmq-c的根目录下创建一个build子目录</span></span>
<span class="line">cmake <span class="token parameter variable">-DCMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local/rabbitmq-c <span class="token punctuation">..</span></span>
<span class="line"><span class="token comment"># 这一步是让cmake根据../CMakeList.txt，即rabbitmq-c的根目录下的CMakeList.txt创建Makefile文件，Makefile文件会被创建到build目录中</span></span>
<span class="line">cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span>  <span class="token parameter variable">--target</span> <span class="token function">install</span></span>
<span class="line"><span class="token comment"># 这一步是真正的build rabbitmq-c库的，注意，不要漏掉点 &#39;.&#39;此时，rabbitmq-c已安装完毕,我们查询一下安装目录/usr/local/rabbitmq-c</span></span>
<span class="line"><span class="token function">whereis</span> rabbitmq-c</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 amqp PHP 扩展</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">wget</span> https://pecl.php.net/get/amqp-1.9.3.tgz</span>
<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> amqp-1.9.3.tgz</span>
<span class="line"><span class="token builtin class-name">cd</span> amqp-1.9.3</span>
<span class="line">phpize</span>
<span class="line">./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config</span>
<span class="line">--with-amqp --with-librabbitmq-dir<span class="token operator">=</span>/usr/local/rabbitmq-c</span>
<span class="line">./configure --with-php-config<span class="token operator">=</span>/usr/bin/php-config --with-amqp --with-librabbitmq-dir<span class="token operator">=</span>/usr/local/rabbitmq-c</span>
<span class="line"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></span>
<span class="line"><span class="token comment"># 此时，扩展生成完毕啦，大功告成。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 amqp</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">pecl <span class="token function">install</span> amqp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>配置amqp扩展</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># 查找php.ini位置</span></span>
<span class="line"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">&#39;php.ini&#39;</span></span>
<span class="line"><span class="token function">vi</span> /usr/local/php/etc/php.ini</span>
<span class="line"><span class="token comment"># 添加 extension=amqp.so</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,9))])}const b=t(d,[["render",m]]),h=JSON.parse('{"path":"/php/","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754642790000,"contributors":[{"name":"lsj","username":"lsj","email":"lishaojie@aithu.com","commits":1,"url":"https://github.com/lsj"}],"changelog":[{"hash":"68c8fe668940c6c2d5e4fcf94e88aebaeecb290d","time":1754642790000,"email":"lishaojie@aithu.com","author":"lsj","message":"updte"}]},"filePathRelative":"php/README.md"}');export{b as comp,h as data};

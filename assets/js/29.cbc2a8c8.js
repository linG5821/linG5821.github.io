(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{433:function(a,t,s){"use strict";s.r(t);var e=s(32),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"环境搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[a._v("#")]),a._v(" 环境搭建")]),a._v(" "),s("h3",{attrs:{id:"homestead-搭建基本环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#homestead-搭建基本环境"}},[a._v("#")]),a._v(" Homestead 搭建基本环境")]),a._v(" "),s("ol",[s("li",[a._v("拉取项目，添加env文件,并将项目放入虚拟机的映射文件中")]),a._v(" "),s("li",[a._v("修改项目权限，简单起见chmod 777")]),a._v(" "),s("li",[a._v("配置Homestead.yml文件的项目访问域名映射")]),a._v(" "),s("li",[a._v("修改/etc/hosts 文件,添加域名和IP的映射解析 例如:192.168.10.10  homestead.linde")]),a._v(" "),s("li",[a._v("vagrant up --provision 启动虚拟机")]),a._v(" "),s("li",[a._v("vagrant ssh 连接虚拟机 进入映射项目目录执行composer install 安装项目依赖")]),a._v(" "),s("li",[a._v("sudo killall -HUP mDNSResponder 刷新hosts文件的修改")]),a._v(" "),s("li",[a._v("PHP远程调试携带参数:Cookie: XDEBUG_SESSION=PHPSTORM")]),a._v(" "),s("li",[s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" homestead.linde\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("to")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /home/vagrant/code/linde_web/public\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("php")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"7.1"')]),a._v("\n")])])]),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" homestead.linde\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("to")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /home/vagrant/code/linde_web/public\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("php")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"7.1"')]),a._v("\n")])])]),a._v("homestead nginx 配置php版本修改重启失效,可以在Homestead.yaml文件中单独指定每个站点的php版本，此时虚拟机的nginx配置改变"),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" homestead.linde\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("to")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" /home/vagrant/code/linde_web/public\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("php")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"7.1"')]),a._v("\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"docker-搭建基本环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-搭建基本环境"}},[a._v("#")]),a._v(" Docker 搭建基本环境")]),a._v(" "),s("ol",[s("li",[a._v("Docker安装")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("* 官网地址： https://www.docker.com/  \n* 下载地址： https://www.docker.com/get-started\n* **安装步骤不在赘述。**\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),a._v("获取开发环境PHP docker镜像")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n# github项目地址： https://github.com/Laradock/laradock\n# 克隆代码 克隆的位置比较敏感，PHP Workspace会以克隆地址目录作为基础。\ngit clone git@github.com:laradock/laradock.git\n```\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code")])]),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code")])]),a._v("拉取部署镜像，首先要配置好docker的国内的源，用来加速镜像。配置位于： ~/.docker/daemon.json")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('```json\n{\n"registry-mirrors": [\n    "https://registry.docker-cn.com",\n    "https://dockerhub.azk8s.cn",\n    "https://reg-mirror.qiniu.com"\n],\n"insecure-registries": [],\n"debug": true,\n"experimental": false\n}\n```\n')])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),a._v("复制切换到源码目录，打开终端构建镜像。这要花费一定的时间。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\ndocker-compose build\n```\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),a._v("启动PHP工作容器。\n"),s("p",[a._v("根据自己的需要启动组件。比如mysql，redis，mongo之类的。nginx应该是必须要的这样访问localhost可以看到自己的项目")]),a._v(" "),s("p",[a._v("还有一些组件laradock_php-fpm，laradock_workspace是默认启动的，因为其他组件依赖这些组件。而且这些组件也算是基础必须的组件了。")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\ndocker-compose up -d nginx mysql\n```\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("        Name                          Command              State                    Ports\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("        Name                          Command              State                    Ports\n")])])]),a._v("构建第一个项目\n在这之前已经顺利启动了相关组件以及workspace。 通过“docker-compose ps”命令查看启用状况。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n        Name                          Command              State                    Ports\n--------------------------------------------------------------------------------------------------------------\nlaradock_docker-in-docker_1   dockerd-entrypoint.sh           Up      2375/tcp\nlaradock_mysql_1              docker-entrypoint.sh mysqld     Up      0.0.0.0:3306->3306/tcp, 33060/tcp\nlaradock_nginx_1              /bin/bash /opt/startup.sh       Up      0.0.0.0:443->443/tcp, 0.0.0.0:80->80/tcp\nlaradock_php-fpm_1            docker-php-entrypoint php-fpm   Up      9000/tcp\nlaradock_workspace_1          /sbin/my_init                   Up      0.0.0.0:2222->22/tcp\n```\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[s("p",[a._v("在这里需要作出一些说明")]),a._v(" "),s("ul",[s("li",[a._v("PHP所需要的SDK和Runtime已经安装在了docker容器中，并且容器正在运行。")]),a._v(" "),s("li",[a._v("想要创建新的项目，只能利用容器。因为主机只有docker，docker容器中才有SDK。")]),a._v(" "),s("li",[a._v("docker利用和主机共享目录的方式创建项目和开发项目。主机利用共享目录开发，容器利用共享目录支撑运行。")])])]),a._v(" "),s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("p",[a._v("进入workspace容器")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\ndocker-compose exec --user=laradock workspace bash\n```\n**必须使用laradock用户权限进入创建项目。如果用root权限创建是不行的，具体会有提示。**\n")])])]),s("ol",{attrs:{start:"9"}},[s("li",[a._v("脚手架安装和使用")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("* 创建项目的命令包括：（没有配置国内源，先配置。见下）\n```\ncomposer create-project laravel/laravel demo\n# or\nlaravel new demo\n```\n* 其中laravel脚手架需要额外进行安装。安装完就可以用脚手架搭建项目了。\n```\ncomposer global require laravel/installer\n```\n\n* 进入容器后，使用脚手架需要配置国内源，否则很难创建项目。\n```\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n")])])]),s("ol",{attrs:{start:"10"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),a._v("运行之前，这里需要修改\n修改.env文件，将基础目录直接映射至自己的项目。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n# Point to the path of your applications code on your host\nAPP_CODE_PATH_HOST=../wwwroot/demo\n```\n重启niginx\n```\ndocker-compose up -d nginx\n```\n")])])]),s("ol",{attrs:{start:"11"}},[s("li",[a._v("运行\n打开"),s("a",{attrs:{href:"http://localhost",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://localhost"),s("OutboundLink")],1),a._v("此时应该会显示Laravel的项目开始图片。\n"),s("img",{attrs:{src:"https://laravelacademy.org/wp-content/uploads/2017/09/15051482331119.jpg",alt:"image"}})])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("<center><font size=32>GOOD LUCK</font></center>\n\n\n一些有用的网址以及教程参考：  \n[https://laravel.com/  ](https://note.youdao.com/)\n[https://laravel.com/docs/5.7  ](https://note.youdao.com/)\n[https://pkg.phpcomposer.com/  \nhttps://laravelacademy.org/post/7691.html  \nhttps://laravelacademy.org/post/6569.html  \nhttps://learnku.com/articles/14767/self-built-laravel-docker-development-environment](https://note.youdao.com/)\n")])])]),s("h3",{attrs:{id:"amqp-扩展安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amqp-扩展安装"}},[a._v("#")]),a._v(" AMQP 扩展安装")]),a._v(" "),s("ol",[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    git clone https://github.com/alanxz/rabbitmq-c.git\n    cd rabbitmq-c/\n    mkdir build && cd build\n    # 这一步是在rabbitmq-c的根目录下创建一个build子目录\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..\n    # 这一步是让cmake根据../CMakeList.txt，即rabbitmq-c的根目录下的CMakeList.txt创建Makefile文件，Makefile文件会被创建到build目录中\n    cmake --build .  --target install\n    # 这一步是真正的build rabbitmq-c库的，注意，不要漏掉点 '.'此时，rabbitmq-c已安装完毕,我们查询一下安装目录/usr/local/rabbitmq-c\n    whereis rabbitmq-c\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    git clone https://github.com/alanxz/rabbitmq-c.git\n    cd rabbitmq-c/\n    mkdir build && cd build\n    # 这一步是在rabbitmq-c的根目录下创建一个build子目录\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..\n    # 这一步是让cmake根据../CMakeList.txt，即rabbitmq-c的根目录下的CMakeList.txt创建Makefile文件，Makefile文件会被创建到build目录中\n    cmake --build .  --target install\n    # 这一步是真正的build rabbitmq-c库的，注意，不要漏掉点 '.'此时，rabbitmq-c已安装完毕,我们查询一下安装目录/usr/local/rabbitmq-c\n    whereis rabbitmq-c\n")])])]),a._v("安装 rabbitmq-c")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n    git clone https://github.com/alanxz/rabbitmq-c.git\n    cd rabbitmq-c/\n    mkdir build && cd build\n    # 这一步是在rabbitmq-c的根目录下创建一个build子目录\n    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..\n    # 这一步是让cmake根据../CMakeList.txt，即rabbitmq-c的根目录下的CMakeList.txt创建Makefile文件，Makefile文件会被创建到build目录中\n    cmake --build .  --target install\n    # 这一步是真正的build rabbitmq-c库的，注意，不要漏掉点 '.'此时，rabbitmq-c已安装完毕,我们查询一下安装目录/usr/local/rabbitmq-c\n    whereis rabbitmq-c\n```\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    wget https://pecl.php.net/get/amqp-1.9.3.tgz\n    tar -xvf amqp-1.9.3.tgz\n    cd amqp-1.9.3\n    phpize\n    ./configure --with-php-config=/usr/local/php/bin/php-config\n    --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    ./configure --with-php-config=/usr/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    make && make install\n    # 此时，扩展生成完毕啦，大功告成。\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    wget https://pecl.php.net/get/amqp-1.9.3.tgz\n    tar -xvf amqp-1.9.3.tgz\n    cd amqp-1.9.3\n    phpize\n    ./configure --with-php-config=/usr/local/php/bin/php-config\n    --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    ./configure --with-php-config=/usr/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    make && make install\n    # 此时，扩展生成完毕啦，大功告成。\n")])])]),a._v("安装 amqp PHP 扩展")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n    wget https://pecl.php.net/get/amqp-1.9.3.tgz\n    tar -xvf amqp-1.9.3.tgz\n    cd amqp-1.9.3\n    phpize\n    ./configure --with-php-config=/usr/local/php/bin/php-config\n    --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    ./configure --with-php-config=/usr/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c\n    make && make install\n    # 此时，扩展生成完毕啦，大功告成。\n```\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])]),a._v("安装 amqp")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\npecl install amqp\n```\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    查找php.ini位置\n    find / -name 'php.ini'\n    vi /usr/local/php/etc/php.ini\n    添加 extension=amqp.so\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    查找php.ini位置\n    find / -name 'php.ini'\n    vi /usr/local/php/etc/php.ini\n    添加 extension=amqp.so\n")])])]),a._v("配置amqp扩展")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("```\n    查找php.ini位置\n    find / -name 'php.ini'\n    vi /usr/local/php/etc/php.ini\n    添加 extension=amqp.so\n```")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{352:function(e,s,t){"use strict";t.r(s);var a=t(16),o=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"项目配置优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目配置优先级"}},[e._v("#")]),e._v(" 项目配置优先级")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("file:config/application.yml")])]),e._v(" "),s("li",[s("strong",[e._v("file:application.yml")])]),e._v(" "),s("li",[s("strong",[e._v("classpath:config/application.yml")])]),e._v(" "),s("li",[s("strong",[e._v("classpath:application.yml")])])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("从上到下优先级依次变低")])]),e._v(" "),s("h2",{attrs:{id:"默认静态资源优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认静态资源优先级"}},[e._v("#")]),e._v(" 默认静态资源优先级")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("resources/META-INF/resources")])]),e._v(" "),s("li",[s("strong",[e._v("resources/resources")])]),e._v(" "),s("li",[s("strong",[e._v("resources/static")])]),e._v(" "),s("li",[s("strong",[e._v("resources/public")])])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("从上到下优先级依次变低\n实际上是代码中资源路径数组的生命顺序")])]),e._v(" "),s("h2",{attrs:{id:"spring中的路径匹配规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring中的路径匹配规则"}},[e._v("#")]),e._v(" Spring中的路径匹配规则")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("?")]),e._v(" 匹配一个字符")]),e._v(" "),s("li",[s("code",[e._v("*")]),e._v(" 匹配零个或者多个字符")]),e._v(" "),s("li",[s("code",[e._v("**")]),e._v(" 匹配零个或者多个路径中的目录")]),e._v(" "),s("li",[s("code",[e._v("{spring:[a-z]+}")]),e._v(" 匹配一个正则 "),s("code",[e._v("[a-z]+")]),e._v(" 作为一个路径变量 "),s("code",[e._v('"spring"')]),e._v(" 的值")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[s("strong",[e._v("例子")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("com/t?st.jsp")]),e._v(" — 匹配 "),s("code",[e._v("com/test.jsp")]),e._v(" 也匹配 "),s("code",[e._v("com/tast.jsp")]),e._v(" 或者 "),s("code",[e._v("com/txst.jsp")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("com/*.jsp")]),e._v(" — 匹配所有 "),s("code",[e._v("com")]),e._v(" 目录下的 "),s("code",[e._v(".jsp")]),e._v(" 文件")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("com/**/test.jsp")]),e._v(" — 匹配所有 "),s("code",[e._v("com")]),e._v(" 目录下的 test.jsp 文件")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("org/springframework/**/*.jsp")]),e._v(" — 匹配所有 "),s("code",[e._v("org/springframework")]),e._v(" 目录下的所有 "),s("code",[e._v(".jsp")]),e._v(" 文件")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("org/**/servlet/bla.jsp")]),e._v(" — 匹配 "),s("code",[e._v("org/springframework/servlet/bla.jsp")]),e._v(" 也匹配 "),s("code",[e._v("org/springframework/testing/servlet/bla.jsp")]),e._v(" 和 "),s("code",[e._v("org/servlet/bla.jsp")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("com/{filename:\\\\w+}.jsp")]),e._v(" 将匹配 "),s("code",[e._v("com/test.jsp")]),e._v(" 并将 "),s("code",[e._v('"test"')]),e._v(" 赋值给 "),s("code",[e._v('"filename"')]),e._v(" 变量")])])])]),e._v(" "),s("h2",{attrs:{id:"bean的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean的生命周期"}},[e._v("#")]),e._v(" Bean的生命周期")]),e._v(" "),s("h3",{attrs:{id:"bean的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean的作用域"}},[e._v("#")]),e._v(" Bean的作用域")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("singleton")]),e._v(" 单例作用域")])]),e._v(" "),s("p",[e._v("Bean 在 IOC 容器中仅存在一个实例")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("prototype")]),e._v(" 原型作用域")])]),e._v(" "),s("p",[e._v("每次从容器中调用Bean(getBean())时, 都返回一个新的实例")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("request")]),e._v(" HTTP 请求作用域(WEB)")])]),e._v(" "),s("p",[e._v("每次HTTP请求都会创建一个 Bean")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("session")]),e._v(" HTTP Session 作用域(WEB)")])]),e._v(" "),s("p",[e._v("同一个 HTTP Session 共享一个 Bean, 不同的 Session 使用不同的 Bean")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("global-session")]),e._v(" 全局 session 作用域(WEB)")])]),e._v(" "),s("p",[e._v("用于 Portlet 应用, Spring 5 已经没有了")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Portlet 是能够生成语义代码（例如：HTML）片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。")])]),e._v(" "),s("h3",{attrs:{id:"生命周期阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期阶段"}},[e._v("#")]),e._v(" 生命周期阶段")]),e._v(" "),s("ol",[s("li",[e._v("实例化阶段")]),e._v(" "),s("li",[e._v("属性赋值阶段")]),e._v(" "),s("li",[e._v("初始化阶段")]),e._v(" "),s("li",[e._v("销毁阶段")])]),e._v(" "),s("h3",{attrs:{id:"生命周期接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期接口"}},[e._v("#")]),e._v(" 生命周期接口")]),e._v(" "),s("h4",{attrs:{id:"容器级接口方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器级接口方法"}},[e._v("#")]),e._v(" 容器级接口方法")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("InstantiationAwareBeanPostProcessor 实例化感知后处理器")]),e._v(" "),s("ul",[s("li",[e._v("InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation")])]),e._v(" "),s("p",[e._v("Bean 实例化之前调用, 如果返回值不为 null, 后续的 Bean 创建流程(实例化、初始化)都不会执行, 返回值会替换原有的 bean 作为代理, 是实现 AOP 的关键")]),e._v(" "),s("ul",[s("li",[e._v("InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation")])]),e._v(" "),s("p",[e._v("Bean 实例化之后属性填充之前调用, 如果返回 false 后续的属性填充和属性依赖注入都不会执行")]),e._v(" "),s("ul",[s("li",[e._v("InstantiationAwareBeanPostProcessor#postProcessPropertyValues")])]),e._v(" "),s("p",[e._v("在 applyPropertyValues 属性填充方法之前 如果返回 null 将不会进行后续的属性填充")])]),e._v(" "),s("li",[s("p",[e._v("BeanPostProcessor Bean 后处理方法")]),e._v(" "),s("ul",[s("li",[e._v("postProcessBeforeInitialization 在属性赋值之后, 在各种 Bean级别的 Aware 之后")]),e._v(" "),s("li",[e._v("postProcessAfterInitialization 在任何 bean 初始化回调(InitializingBean、afterPropertiesSet、自定义初始化方法) 执行之后")])])]),e._v(" "),s("li",[s("p",[e._v("BeanFactoryPostProcessor 工厂后处理方法")]),e._v(" "),s("p",[e._v("BeanDefinitionRegistryPostProcessor 实现 BeanFactoryPostProcessor 接口的接口")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry(registry) 优先调用传入 beanFactoryPostProcessors 的 postProcessBeanDefinitionRegistry, 之后获取容器中注册的 BeanDefinitionRegistryPostProcessor, 会根据是否实现排序接口分别进行处理")])]),e._v(" "),s("li",[s("p",[e._v("BeanFactoryPostProcessor#postProcessBeanFactory(beanFactory) 先处理属于 BeanDefinitionRegistryPostProcessor 接口的实例, 会根据是否实现排序接口分别进行处理")])])])])]),e._v(" "),s("h4",{attrs:{id:"bean级接口方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean级接口方法"}},[e._v("#")]),e._v(" Bean级接口方法")]),e._v(" "),s("p",[e._v("Bean 类直接实现接口的方法，比如 "),s("code",[e._v("BeanNameAware")]),e._v("、"),s("code",[e._v("BeanFactoryAware")]),e._v("、"),s("code",[e._v("ApplicationContextAware")]),e._v("、"),s("code",[e._v("InitializingBean``、DisposableBean")]),e._v(" 等方法，这些方法只对当前 Bean 生效。")]),e._v(" "),s("ol",[s("li",[s("p",[s("strong",[e._v("Aware 类型接口")])]),e._v(" "),s("p",[e._v("可以帮我们拿到 Spring 容器中的一些资源, 所有的 Aware 都是在初始化之前调用的")])])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Beanxxx 直接调用组(先执行)")]),e._v(" "),s("ul",[s("li",[e._v("BeanNameAware")]),e._v(" "),s("li",[e._v("BeanClassLoaderAware")]),e._v(" "),s("li",[e._v("BeanFactoryAware")])])]),e._v(" "),s("li",[s("p",[e._v("环境资源注入组(后执行)")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("EnvironmentAware")])]),e._v(" "),s("li",[s("p",[e._v("EmbeddedValueResolverAware")]),e._v(" "),s("p",[e._v("实现该接口能够获取 Spring EL 解析器，用户的自定义注解需要支持 SPEL 表达式的时候可以使用。")])]),e._v(" "),s("li",[s("p",[e._v("ApplicationContextAware(ResourceLoaderAware/ApplicationEventPublisherAware/MessageSourceAware)")]),e._v(" "),s("p",[e._v("这几个接口的返回值实质上都是当前的 ApplicationContext 对象，因为 ApplicationContext 是一个复合接口。与此相关的 Aware 都是通过BeanPostProcessor#postProcessBeforeInitialization()， 通过 ApplicationContextAwareProcessor#invokeAwareInterfaces 可以得知。")])])])])]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[e._v("生命周期接口")])])]),e._v(" "),s("ul",[s("li",[e._v("InitializingBean 初始化阶段")]),e._v(" "),s("li",[e._v("DisposableBean 销毁阶段")])]),e._v(" "),s("h3",{attrs:{id:"生命周期流程图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期流程图"}},[e._v("#")]),e._v(" 生命周期流程图")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://ling-root-bucket.oss-cn-hangzhou.aliyuncs.com/picgo/3470413121-2abed99e085c254a.webp",alt:"生命周期流程图"}})])])}),[],!1,null,null,null);s.default=o.exports}}]);
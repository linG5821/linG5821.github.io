(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{392:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"powershell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#powershell"}},[s._v("#")]),s._v(" Powershell")]),s._v(" "),a("ol",[a("li",[s._v("执行多个命令使用 "),a("code",[s._v(";")]),s._v(" 分割  linux 中使用 &&")]),s._v(" "),a("li",[s._v('设置环境变量使用 $env:KEY="VALUE" 而 CMD 使用 set KEY=VALUE')])]),s._v(" "),a("h2",{attrs:{id:"win下gpg的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#win下gpg的使用"}},[s._v("#")]),s._v(" Win下GPG的使用")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("安装Gpg4win, 下载地址: "),a("a",{attrs:{href:"https://gpg4win.org/download.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://gpg4win.org/download.html"),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[s._v("修改Git配置使用安装的gpg")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global gpg.program "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yourpath\\GnuPG'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\b"}},[s._v("\\b")]),s._v('in\\gpg.exe"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示配置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global gpg.program\n")])])])]),s._v(" "),a("li",[a("p",[s._v("创建与设置秘钥")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("gpg --full-generate-key\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择加密方式 选择默认的1即可，表示加密和签名均使用 RSA 算法")]),s._v("\nPlease "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" what kind of key you want:\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" RSA and RSA "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" DSA and Elgamal\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" DSA "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sign only"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" RSA "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sign only"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Existing key from card\nYour selection? "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最长为4096位，设置为4096位即可")]),s._v("\nRSA keys may be between "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" and "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v(" bits long.\nWhat keysize "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" you want? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3072")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4096")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置密钥有效期 选择0为永久有效")]),s._v("\nPlease specify how long the key should be valid.\n         "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key does not expire\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key expires "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" n days\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("w "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key expires "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" n weeks\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key expires "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" n months\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key expires "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" n years\nKey is valid for? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 完成上述设置后，会要求确认 确认即可")]),s._v("\nIs this correct? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y/N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("y\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置用户ID 邮箱  备注等信息  还需要输入密码")]),s._v("\nGnuPG needs to construct a user ID to identify your key.\nReal name:\nEmail address: \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示秘钥列表 此例子中GPG 密钥 ID 是 3AA5C34371567BD2")]),s._v("\ngpg --list-secret-keys --keyid-format"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("long\nor\ngpg -K\n/Users/hubot/.gnupg/secring.gpg\n------------------------------------\nsec   4096R/3AA5C34371567BD2 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2016")]),s._v("-03-10 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("expires: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2017")]),s._v("-03-10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nuid                          Hubot \nssb   4096R/42B317FD4BA89E7A "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2016")]),s._v("-03-10\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 秘钥内容  ")]),s._v("\ngpg --armor --export 3AA5C34371567BD2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出秘钥到文件")]),s._v("\ngpg --armor --output public-key.txt --export 3AA5C34371567BD2\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成吊销证书(推荐生成, gpg默认会生成, 位置: C:\\Users\\xxx\\AppData\\Roaming\\gnupg\\openpgp-revocs.d\\keyid.rev)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# 如果要使用需要去除 "-----BEGIN PGP PUBLIC KEY BLOCK-----" 前的 ":"')]),s._v("\ngpg --gen-revoke 3AA5C34371567BD2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成吊销证书的交互, 最后复制吊销内容到文件")]),s._v("\nCreate a revocation certificate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" this key? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y/N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" y\nPlease "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" the reason "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" the revocation:\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" No reason specified\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Key has been compromised\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Key is superseded\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Key is no longer used\n  Q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Cancel\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Probably you want to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nYour decision? "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nEnter an optional description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" end it with an empty line:\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" To prevent leakage\nReason "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" revocation: No reason specified\nTo prevent leakage\nIs this okay? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y/N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("y\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出公钥 ASCII 形式")]),s._v("\ngpg --armor --output keyid.gpg.pub --export keyid\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 导出私钥 ASCII 形式")]),s._v("\ngpg --armor --output keyid.gpg --export-secret-keys keyid\n")])])])]),s._v(" "),a("li",[a("p",[s._v("GPG秘钥的使用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("配置到github")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("复制公钥内容到 github 添加 GPG Key")])]),s._v(" "),a("li",[a("p",[s._v("设置 git 配置")])])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.signingkey 3AA5C34371567BD2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确认配置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config  -l\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置全局提交使用该秘钥")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global commit.gpgsign "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 单次提交中签名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -S -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..."')]),s._v("\n\n")])])])]),s._v(" "),a("li",[a("p",[s._v("用于maven发布到中央仓库")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("发布公钥到公钥服务器")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目前支持如下如下服务器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keyserver.ubuntu.com")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keys.openpgp.org")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pgp.mit.edu")]),s._v("\ngpg --keyserver hkp://keyserver.ubuntu.com:80 --send-keys 3AA5C34371567BD2\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 验证")]),s._v("\ngpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3AA5C34371567BD2\n\n")])])])]),s._v(" "),a("li",[a("p",[s._v("本地发布 如果秘钥存在密码 需要正在settings文件中添加如下内容 可以通过 maven-gpg-plugin 插件的配置修改对应的id 等")]),s._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("gpg.passphrase"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("passphrase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("${your passphrase}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("passphrase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[s._v("配合github action 进行自动化发布 参考"),a("a",{attrs:{href:"https://github.com/linG5821/mtime.git",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/linG5821/mtime.git"),a("OutboundLink")],1)])])])])])])]),s._v(" "),a("h2",{attrs:{id:"问题总结及解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题总结及解决方案"}},[s._v("#")]),s._v(" 问题总结及解决方案")]),s._v(" "),a("ol",[a("li",[s._v("Hyper-V 将动态端口中的几段范围的端口保留给自己使用,导致产生各种端口被占用的问题")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看当前动态端口的范围")]),s._v("\nnetsh int ipv4 show dynamicport tcp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看tcp ipv4端口排除范围（被系统或者我们自己保留的端口）")]),s._v("\nnetsh int ipv4 show excludedport tcp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员身份打开 powershell，然后设置 tcp ipv4 的动态端口范围为 49152 开始的 16384 个端口，也就是 49152~65535 (这个是windows默认的)")]),s._v("\nnetsh int ipv4 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" dynamicport tcp "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("start")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("49152")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("num")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("Git配置代理")])]),s._v(" "),a("ul",[a("li",[s._v("http/https代理")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 注意将对应的代理地址及端口更换为自己对应的值\nHTTP 代理\n  git config --global http.proxy "http://127.0.0.1:10809"\n  git config --global https.proxy "http://127.0.0.1:10809"\n\nSocket5 代理\n  git config --global http.proxy "socks5://127.0.0.1:10808"\n  git config --global https.proxy "socks5://127.0.0.1:10808"\n')])])]),a("ul",[a("li",[a("p",[s._v("ssh代理")]),s._v(" "),a("ul",[a("li",[s._v("windows")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 编辑文件地址 ~/.ssh/config\nHost github.com *.github.com\n    User git\n    Port 22\n    Hostname %h\n    IdentityFile ~\\.ssh\\id_rsa\n    ProxyCommand connect -S 127.0.0.1:10808 %h %p\n")])])]),a("ul",[a("li",[s._v("WSL2")])]),s._v(" "),a("p",[a("s",[s._v("wsl2 中有一个问题，这里 wsl2 实际上是蹭用主机的代理，wsl2 相比 wsl1 在网络上发生了变化，导致访问windows需要知道具体的IP，所以这里的 winip 应该更换为对应的主机 (windows) 的IP地址，我更多情况下会将其设置为域名，然后只在 windows 上更改 hosts 文件并同步到wsl中即可，但是如果切换网络，切换 wifi 之后需要重新配置，参考过一些文章可以通过 "),a("code",[s._v("/etc/resolv.conf")]),s._v(" 获取 winip ，实际测试并未成功，因为我的 "),a("code",[s._v("/etc/resolv.conf")]),s._v(" 之前因为 wsl2 无法访问互联网，所以修改过其中的 DNS 值，并取消了自动生成的机制")]),a("br")]),s._v(" "),a("p",[s._v("如果不自定义 "),a("code",[s._v("/etc/resolv.conf")]),s._v(" 可以通过 "),a("code",[s._v("cat /etc/resolv.conf | grep nameserver | awk '{ print $2 }'")]),s._v(" 获取宿主机IP, wsl2 默认配置在/etc/resolv.conf文件中的是一个代理,所以如果 wsl2 镜像源无法使用或者无法访问外网, 我们只需要去更改主机的DNS, 而不必去修改 /etc/resolv.conf 文件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 编辑文件地址 ~/.ssh/config\nHost github.com *.github.com\n    User git\n    Port 22\n    Hostname %h\n    IdentityFile ~\\.ssh\\id_rsa\n    ProxyCommand nc -v -x winip:10808 %h %p\n")])])])]),s._v(" "),a("li",[a("p",[s._v("代理设置脚本")])])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("hostip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/resolv.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" nameserver "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{ print $2 }'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("wslip")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostname")]),s._v(" -I "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("http_port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10809")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("socket_port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10808")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PROXY_HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${hostip}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${http_port}")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PROXY_SOCKET")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${hostip}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${socket_port}")]),s._v('"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("set_proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#export http_proxy="${PROXY_HTTP}"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#export HTTP_PROXY="${PROXY_HTTP}"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#export https_proxy="${PROXY_HTTP}"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#export HTTPS_PROXY="${PROXY_HTTP}"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#export SOCKET_PROXY="${PROXY_SOCKET}"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PROXY_HOST_IP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${hostip}")]),s._v('"')]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global http.proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"socks5://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${PROXY_SOCKET}")]),s._v('"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global https.proxy "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"socks5://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${PROXY_SOCKET}")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("unset_proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#unset http_proxy")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#unset HTTP_PROXY")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#unset https_proxy")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#unset HTTPS_PROXY")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#unset SOCKET_PROXY")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("unset")]),s._v(" PROXY_HOST_IP\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset http.proxy\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global --unset https.proxy\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("test_setting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Host ip:"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${hostip}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"WSL ip:"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${wslip}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Current proxy: http: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PROXY_HTTP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"socket: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PROXY_SOCKET")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"set"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    set_proxy\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unset"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    unset_proxy\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    test_setting\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Unsupported arguments."')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])])]),a("p",[s._v("在 "),a("code",[s._v("~/.bashrc")]),s._v(" 中添加")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("proxy")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"source /path/to/proxy.sh"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" /path/to/proxy.sh "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("截取主机某个网卡的IP")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 可以将 select-string 后的关键字改成具体的网卡名称关键字\n(ipconfig|select-string "无线" -context 1,4 | findStr "IPv4").Split(":")[-1]\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("python脚本获取主机IP")])]),s._v(" "),a("ul",[a("li",[s._v("方式一：（ 此方式可能获取到虚拟IP ）"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import socket\nhostname = socket.gethostname()\nip = socket.gethostbyname(hostname)\nprint(ip)\n")])])])]),s._v(" "),a("li",[s._v("方式二：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import socket\n\ndef get_host_ip():\n     """\n     查询本机ip地址\n     :return: ip\n     """\n     try:\n         s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         s.connect((\'8.8.8.8\', 80))\n         ip = s.getsockname()[0]\n     finally:\n         s.close()\n\n     return ip\n\nif __name__ == \'__main__\':\n     print(get_host_ip())\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);
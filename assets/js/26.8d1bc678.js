(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{345:function(a,s,t){"use strict";t.r(s);var e=t(17),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"docker安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[a._v("#")]),a._v(" Docker安装")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("添加Docker 安装包的仓库")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" yum "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-y")]),a._v(" yum-utils\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker官方仓库")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 阿里云仓库")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n")])])])]),a._v(" "),s("li",[s("p",[a._v("按照Docker版本排序，安装指定版本")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 按照版本排序")]),a._v("\nyum list docker-ce --showduplicates"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-r")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 选择指定版本安装")]),a._v("\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker-ce-19.03.2-3.el7\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"docker配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker配置"}},[a._v("#")]),a._v(" Docker配置")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("重启守护进程，但不重启容器(无法在docker swarm集群下使用)")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改 /etc/docker/daemon.json")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"live-restore"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 更新配置")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-SIGHUP")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("pidof dockerd"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 检查是否配置成功")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" info "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" live\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启docker 不会重启容器")]),a._v("\n systemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("Docker 容器配置重新加载")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" HUP "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("container-name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"特殊命令操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊命令操作"}},[a._v("#")]),a._v(" 特殊命令操作")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("抓取容器网络请求包")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 获取容器的进程PID")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" inspect "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--format")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{{.State.Pid}}"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${container_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("name}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 切换网络命名空间 PS : 退出使用exit 通过ifconfig 对比变化 多次执行需要退出多次")]),a._v("\nnsenter "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${container_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("name}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用tcpdump抓取网络请求包")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 例如: tcpdump tcp -i eth1 port 6379")]),a._v("\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[a._v("#")]),a._v(" Dockerfile")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Dockerfile中 ENTRYPOINT/CMD 指定使用 shell 方式和exec方式时读取环境变量的区别")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("shell 方式  只能读取到在 Dockerfile 中设置的环境变量, 无法读取通过-e指定但是没有在dockerfile中的环境变量\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" 方式 不仅能读取 Dockerfile 中的环境变量, 还能读取不存在的通过-e指定的其他环境变量\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"docker-swarm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-swarm"}},[a._v("#")]),a._v(" Docker Swarm")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("创建overlay 网络")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" network create "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--attachable")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" overlay network_name "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--subnet")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${subnet}")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("swarm集群需要开放的端口")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TCP 2377 用于swarm集群")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TCP/UDP 端口 4789 覆盖网络流量 容器间可以相互ping通")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TCP/UDP 端口 7946 节点间通信(容器网络发现)")]),a._v("\niptables "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" INPUT "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2377")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\niptables "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" INPUT "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4789")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\niptables "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" INPUT "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" udp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4789")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\niptables "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" INPUT "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7946")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\niptables "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-I")]),a._v(" INPUT "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" udp "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7946")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\n\n")])])])]),a._v(" "),s("li",[s("p",[a._v("overlay网络创建后,子节点无法从docker-compose 直接使用,可以手动创建一个容器指定该网络后,该网络才会显示在子节点的网络列表中,在无任何引用节点后又会消失")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--network")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${network}")]),a._v(" busybox\n")])])])]),a._v(" "),s("li",[s("p",[a._v("Error response from daemon: Could not attach to network mystack_default : context deadline exceeded")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v(" update "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--availability")]),a._v(" active nodeId\n")])])])]),a._v(" "),s("li",[s("p",[a._v("Swarm Node 标签操作")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 更新 role 可以更换其他键 相同键仅能有一个值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v(" update --label-add "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("role")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("xxxx "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 移除 role 为删除的键")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("node")]),a._v(" update --label-rm role "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"docker-compose安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose安装"}},[a._v("#")]),a._v(" Docker Compose安装")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("下载docker-compose 文件")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 最新版本请参考 https://docs.docker.com/compose/install/")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-L")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("uname")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("uname")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" /usr/local/bin/docker-compose\n")])])])]),a._v(" "),s("li",[s("p",[a._v("修改二进制执行权限")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("chmod")]),a._v(" +x /usr/local/bin/docker-compose\n")])])])]),a._v(" "),s("li",[s("p",[a._v("测试安装")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看是否显示版本信息")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker-compose")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v("\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"docker-stack-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-stack-使用"}},[a._v("#")]),a._v(" Docker Stack 使用")]),a._v(" "),s("ol",[s("li",[a._v("部署命令 "),s("code",[a._v("docker stack deploy -c xxxx.yml {stack_name} --with-registry-auth")]),a._v(" 当拉取镜像需要权限时需要添加 "),s("code",[a._v("--with-registry-auth")])]),a._v(" "),s("li",[a._v("部署模式 deploy.mode\n"),s("ul",[s("li",[a._v("部署模式分为 "),s("code",[a._v("global")]),a._v(" 和  "),s("code",[a._v("replicated")]),a._v("(默认)")]),a._v(" "),s("li",[s("code",[a._v("global")]),a._v(" 会根据部署策略在每一个节点上都部署一个服务, 没有预先指定数量, 那么每次新增节点服务也会被分配到新的节点")]),a._v(" "),s("li",[s("code",[a._v("replicated")]),a._v(" 可以指定相同服务的数量, 并根据策略分发在符合条件的机器上")])])]),a._v(" "),s("li",[a._v("端口发布模式 ports.mode\n"),s("ul",[s("li",[a._v("端口发布模式分为 "),s("code",[a._v("host")]),a._v(" 和  "),s("code",[a._v("ingress")]),a._v("(默认)")]),a._v(" "),s("li",[s("code",[a._v("host")]),a._v(" 会把每一个部署了服务的节点的端口都映射出来, 所以当端口发布模式为 "),s("code",[a._v("host")]),a._v(" 时 指定 "),s("code",[a._v("replicas")]),a._v(" 大于 swarm集群节点数量时只能启动 集群节点数量的服务节点, 因为一个集群节点只能映射一个端口")]),a._v(" "),s("li",[s("code",[a._v("ingress")]),a._v(" 会把swarm 集群内所有节点的端口都映射, 即使这个机器上没有部署该服务")])])])]),a._v(" "),s("h2",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[a._v("#")]),a._v(" 常见问题")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Docker服务安装后无法启动 Error starting daemon: Error initializing network controller: error obtaining controller instance: failed to create NAT chain: Iptables not found")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker 需要 iptables进行转发 安装iptables")]),a._v("\nyum "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" iptables.service\nsystemctl start iptables.service\nsystemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("enable")]),a._v(" iptables.service\n")])])])]),a._v(" "),s("li",[s("p",[a._v("Docker swarm 集群强制退出导致 Error response from daemon: rpc error: code = Unknown desc = The swarm does not have a leader. It's possible that too few managers are online. Make sure more than half of the managers are online.")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" swarm init --force-new-cluster\n")])])])]),a._v(" "),s("li",[s("p",[a._v("Java 程序无法读取到外部环境变量, 例如： "),s("code",[a._v("spring.profiles.active")]),a._v(", 原因是部分基础镜像alpine, busybox不支持含有点的环境变量，Posix的命名规范是不能含有点号的， sh -c 方式运行的容器不支持传递含点的环境变量，具体参考 https://github.com/docker-library/docs/pull/1222/commits/f2854b0a019519880f56c2d5226c0121dba13d9c， JDK 镜像从 openjdk:8u131-jre-alpine之后就采取这种处理方式了。")]),a._v(" "),s("blockquote",[s("p",[a._v("解决方式使用 bash -c 运行，或者不传递带有点的环境变量")])])])]),a._v(" "),s("h2",{attrs:{id:"一个dockefile示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个dockefile示例"}},[a._v("#")]),a._v(" 一个Dockefile示例")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## entrypoint.sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## java17 才支持该参数 -r")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#!/bin/sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nohup")]),a._v(" jstatd "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JSTATD_ARGS}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" jstatd.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("&1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("java")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${HEAP_OPTS}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAVA_OPTS}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${GC_OPTS}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JMX_OPTS}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-jar")]),a._v(" /opt/app/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAR_FILE}")]),a._v("\n")])])]),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" eclipse-temurin:17")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" RMI_HOSTNAME="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"一个IP"')])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" RMI_PORT=29010")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" HEAP_OPTS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Xms4G -Xmx4G"')])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JAVA_OPTS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Duser.timezone=GMT+08 \\\n-Djava.security.egd=file:/dev/./urandom \\\n--add-opens=java.base/sun.net=ALL-UNNAMED \\\n--add-opens=java.base/java.lang.invoke=ALL-UNNAMED \\\n-Xlog:gc*=debug:file=./data/log/gc/gc%t.log:utctime,level,tags:filecount=50,filesize=100M"')])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" GC_OPTS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-XX:+UnlockExperimentalVMOptions \\\n-XX:+UseG1GC \\\n-XX:+UseStringDeduplication \\\n-XX:G1NewSizePercent=20 \\\n-XX:G1MaxNewSizePercent=40 \\\n-XX:ConcGCThreads=8"')])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JMX_OPTS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Dcom.sun.management.jmxremote \\\n-Dcom.sun.management.jmxremote.port=${RMI_PORT} \\\n-Dcom.sun.management.jmxremote.rmi.port=${RMI_PORT} \\\n-Dcom.sun.management.jmxremote.authenticate=false \\\n-Dcom.sun.management.jmxremote.ssl=false \\\n-Djava.rmi.server.hostname=${RMI_HOSTNAME}"')])]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" TZ=Asia/Shanghai")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" ln -snf /usr/share/zoneinfo/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$TZ")]),a._v(" /etc/localtime && "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),a._v("\n    echo "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$TZ")]),a._v(" > /etc/timezone && "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),a._v("\n    sed -i "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'s/archive.ubuntu.com/mirrors.aliyun.com/g'")]),a._v(" /etc/apt/sources.list && "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),a._v("\n    apt-get update && apt-get install -y telnet && "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),a._v("\n    mkdir -p /opt/app/data/log/gc")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JSTATD_PORT=29011")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JSTATD_RMI_PORT=29012")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JSTATD_ARGS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-J-Djava.security.policy=/opt/jstatd/jstatd.all.policy -J-Djava.rmi.server.hostname=${RMI_HOSTNAME} -J-Djava.rmi.server.logCalls=true -p ${JSTATD_PORT} -r ${JSTATD_RMI_PORT}"')])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" mkdir -p /opt/jstatd && "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),a._v("\n    echo "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'grant codebase "jrt:/jdk.jstatd" {\\n  permission java.security.AllPermission;\\n};\\n grant codebase "jrt:/jdk.internal.jvmstat" {\\n  permission java.security.AllPermission;\\n};\'')]),a._v(" > /opt/jstatd/jstatd.all.policy")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ARG")]),a._v(" JAR_FILE")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" JAR_FILE="),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAR_FILE}")])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" ./entrypoint.sh /opt/app/entrypoint.sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" target/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAR_FILE}")]),a._v(" /opt/app/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JAR_FILE}")])]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("WORKDIR")]),a._v(" /opt/app")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("VOLUME")]),a._v(" /opt/app/data")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("EXPOSE")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${RMI_PORT}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JSTATD_PORT}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${JSTATD_RMI_PORT}")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bash"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/opt/entrypoint.sh"')]),a._v("]")]),a._v("\n\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);
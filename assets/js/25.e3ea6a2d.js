(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{380:function(t,s,n){"use strict";n.r(s);var e=n(44),a=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"powershell"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#powershell"}},[t._v("#")]),t._v(" Powershell")]),t._v(" "),n("ol",[n("li",[t._v("执行多个命令使用 "),n("code",[t._v(";")]),t._v(" 分割  linux 中使用 &&")]),t._v(" "),n("li",[t._v('设置环境变量使用 $env:KEY="VALUE" 而 CMD 使用 set KEY=VALUE')])]),t._v(" "),n("h2",{attrs:{id:"问题总结及解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题总结及解决方案"}},[t._v("#")]),t._v(" 问题总结及解决方案")]),t._v(" "),n("ol",[n("li",[t._v("Hyper-V 将动态端口中的几段范围的端口保留给自己使用,导致产生各种端口被占用的问题")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前动态端口的范围")]),t._v("\nnetsh int ipv4 show dynamicport tcp\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看tcp ipv4端口排除范围（被系统或者我们自己保留的端口）")]),t._v("\nnetsh int ipv4 show excludedport tcp\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 管理员身份打开 powershell，然后设置 tcp ipv4 的动态端口范围为 49152 开始的 16384 个端口，也就是 49152~65535 (这个是windows默认的)")]),t._v("\nnetsh int ipv4 "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" dynamicport tcp "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("49152")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("num")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16384")]),t._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("Git配置代理")])]),t._v(" "),n("ul",[n("li",[t._v("http/https代理")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 注意将对应的代理地址及端口更换为自己对应的值\nHTTP 代理\n  git config --global http.proxy "http://127.0.0.1:10809"\n  git config --global https.proxy "http://127.0.0.1:10809"\n\nSocket5 代理\n  git config --global http.proxy "socks5://127.0.0.1:10808"\n  git config --global https.proxy "socks5://127.0.0.1:10808"\n')])])]),n("ul",[n("li",[t._v("ssh代理")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# windows\n# 编辑文件地址 ~/.ssh/config\n  Host github.com *.github.com\n      User git\n      Port 22\n      Hostname %h\n      IdentityFile ~\\.ssh\\id_rsa\n      ProxyCommand connect -S 127.0.0.1:10808 %h %p\n  \n # wsl\n # 编辑文件地址 ~/.ssh/config\n # wsl2 中有一个问题，这里wsl实际上是蹭用主机的代理，wsl2相比wsl1在网络上发生了变\n # 化，导致访问windows需要知道具体的IP，所以这里的<windows ip>应该更换为对应的主机#（windows）的IP地址，我更多情况下会将其设置为域名，然后只在windows上更改hosts文\n # 件并同步到wsl中即可，但是如果切换网络，切换wifi之后需要重新配置，参考过一些文章\n # 可以通过/etc/resolv.conf获取winip，实际测试并未成功，因为我的/etc/resolv.conf\n # 之前因为wsl2无法访问互联网，所以修改过其中的DNS值，并取消了自动生成的机制\n  Host github.com *.github.com\n      User git\n      Port 22\n      Hostname %h\n      IdentityFile ~\\.ssh\\id_rsa\n      ProxyCommand nc -v -x <windows ip>:10808 %h %p\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("截取主机某个网卡的IP")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 可以将 select-string 后的关键字改成具体的网卡名称关键字\n(ipconfig|select-string "无线" -context 1,4 | findStr "IPv4").Split(":")[-1]\n')])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("python脚本获取主机IP")])]),t._v(" "),n("ul",[n("li",[t._v("方式一：（ 此方式可能获取到虚拟IP ）"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import socket\nhostname = socket.gethostname()\nip = socket.gethostbyname(hostname)\nprint(ip)\n")])])])]),t._v(" "),n("li",[t._v("方式二：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import socket\n\ndef get_host_ip():\n     """\n     查询本机ip地址\n     :return: ip\n     """\n     try:\n         s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         s.connect((\'8.8.8.8\', 80))\n         ip = s.getsockname()[0]\n     finally:\n         s.close()\n\n     return ip\n\nif __name__ == \'__main__\':\n     print(get_host_ip())\n')])])])])}),[],!1,null,null,null);s.default=a.exports}}]);
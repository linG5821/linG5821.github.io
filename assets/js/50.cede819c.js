(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{336:function(r,e,a){"use strict";a.r(e);var s=a(10),t=Object(s.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[r._v("#")]),r._v(" 基本概念")]),r._v(" "),e("h3",{attrs:{id:"消息生产者-producer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息生产者-producer"}},[r._v("#")]),r._v(" 消息生产者(Producer)")]),r._v(" "),e("p",[r._v("负责: 生产消息")]),r._v(" "),e("h4",{attrs:{id:"消息发送方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息发送方式"}},[r._v("#")]),r._v(" 消息发送方式")]),r._v(" "),e("ul",[e("li",[r._v("同步发送(需要Broker返回确认消息)")]),r._v(" "),e("li",[r._v("异步发送(需要Broker返回确认消息)")]),r._v(" "),e("li",[r._v("顺序发送(需要Broker返回确认消息)")]),r._v(" "),e("li",[r._v("单向发送(不需要确认)")])]),r._v(" "),e("h3",{attrs:{id:"消息消费者-consumer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息消费者-consumer"}},[r._v("#")]),r._v(" 消息消费者(Consumer)")]),r._v(" "),e("p",[r._v("负责: 消费消息")]),r._v(" "),e("h4",{attrs:{id:"消息消费形式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息消费形式"}},[r._v("#")]),r._v(" 消息消费形式")]),r._v(" "),e("ul",[e("li",[e("p",[r._v("拉取式消费(Pull Consumer)")]),r._v(" "),e("p",[r._v("特点: 主动调用 Consumer 的拉消息方法从 Broker 的服务器拉消息、主动权由应用控制")])]),r._v(" "),e("li",[e("p",[r._v("推送式消费(Push Consumer)")]),r._v(" "),e("p",[r._v("特点: Broker 收到消息会主动推送给客户端, 一般实时性较高")])])]),r._v(" "),e("h4",{attrs:{id:"消费模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消费模式"}},[r._v("#")]),r._v(" 消费模式")]),r._v(" "),e("ul",[e("li",[e("p",[r._v("集群消费(Clustering)")]),r._v(" "),e("p",[r._v("相同消费模式下, 相同的 Consumer Group 的每个 Consumer 实例平摊消息")])]),r._v(" "),e("li",[e("p",[r._v("广播消费(Broadcasting)")]),r._v(" "),e("p",[r._v("广播消费模式下, 相同的 Consumer Group 的每个 Consumer 实例接收全量消息")])])]),r._v(" "),e("h3",{attrs:{id:"主题-topic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主题-topic"}},[r._v("#")]),r._v(" 主题(Topic)")]),r._v(" "),e("p",[r._v("一类消息的集合, 每条消息只能属于一个主题, 是 RocketMQ 消息订阅的基本单位")]),r._v(" "),e("h3",{attrs:{id:"代理服务器-broker-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理服务器-broker-server"}},[r._v("#")]),r._v(" 代理服务器(Broker Server)")]),r._v(" "),e("p",[r._v("负责: 存储消息、转发消息、存储消息元数据, 包括消费组, 消费进度偏移和主题队列消息")]),r._v(" "),e("h3",{attrs:{id:"名字服务-name-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名字服务-name-server"}},[r._v("#")]),r._v(" 名字服务(Name Server)")]),r._v(" "),e("p",[r._v("负责: 充当路由消息提供者, 生产者或消费者可以通过名字服务查找各主题相应的 Broker IP 列表。多个 NameServer 实例组成集群, 但相互独立没有信息交换。")]),r._v(" "),e("h3",{attrs:{id:"生产者组-producer-group"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生产者组-producer-group"}},[r._v("#")]),r._v(" 生产者组(Producer Group)")]),r._v(" "),e("p",[r._v("同一类生产者的集合, 这类 Producer 发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃, 则 Broker 会通知同一生产组的其他生产者以提交或者回溯")]),r._v(" "),e("h3",{attrs:{id:"消费者组-consumer-group"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消费者组-consumer-group"}},[r._v("#")]),r._v(" 消费者组(Consumer Group)")]),r._v(" "),e("p",[r._v("同一类消费者的集合，这类 Consumer 通常消费同一类消息且消费逻辑一致。同一消费组的消费者是必须订阅同一主题。消费组使得负载均衡和容错变得容易")]),r._v(" "),e("h3",{attrs:{id:"消息顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息顺序"}},[r._v("#")]),r._v(" 消息顺序")]),r._v(" "),e("h4",{attrs:{id:"普通顺序消息-normal-ordered-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#普通顺序消息-normal-ordered-message"}},[r._v("#")]),r._v(" 普通顺序消息(Normal Ordered Message)")]),r._v(" "),e("p",[r._v("普通顺序消费模式下, 消费者通过同一个消息队列(Topic 分区, 称作 Message Queue) 收到的消息是有顺序的, 不同消息队列收到的消息则可能是无顺序的。")]),r._v(" "),e("h4",{attrs:{id:"严格顺序消息-strictly-ordered-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#严格顺序消息-strictly-ordered-message"}},[r._v("#")]),r._v(" 严格顺序消息(Strictly Ordered Message)")]),r._v(" "),e("p",[r._v("严格顺序消息模式下，消费者收到的所有消息均是有顺序的。")]),r._v(" "),e("h3",{attrs:{id:"消息-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消息-message"}},[r._v("#")]),r._v(" 消息(Message)")]),r._v(" "),e("p",[r._v("消息系统传输信息的物理载体, 生产和消费数据的最小单位, 每条消息必须属于一个主题, 每个消息拥有唯一的 Message ID, 且可以携带加油业务标识的 key, 可通过 Message ID 和 Key 查询消息")]),r._v(" "),e("h3",{attrs:{id:"标签-tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签-tag"}},[r._v("#")]),r._v(" 标签(Tag)")]),r._v(" "),e("p",[r._v("为消息设置的标志, 用于同一主题下区分不同类型的消息, 来自同一个业务单元的消息, 可以根据不同业务目的在同一主题下设置不同的标签, 消费者可以根据不同的 tag 实现对不同子主题的不同消费逻辑。")])])}),[],!1,null,null,null);e.default=t.exports}}]);